/*
 *  Copyright 2019 Google Inc. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax = "proto2";

package goosci;

option java_package = "com.google.android.apps.forscience.whistlepunk.data";
option java_outer_classname = "GoosciSensorConfig";
option objc_class_prefix = "GSJ";
option optimize_for = LITE_RUNTIME;

message BleSensorConfig {
  optional string address = 1;

  // Must be a string representation of a number.  Valid values can be found at
  // SensorTypeProvider#SensorKind.
  optional string sensor_type = 2;

  // _If_ the sensor is of type SensorTypeProvider.TYPE_CUSTOM, what pin does it
  // read from?
  optional string customPin = 3;

  // _If_ the sensor is of type SensorTypeProvider.TYPE_CUSTOM, does it use a
  // frequency filter?
  optional bool customFrequency = 4;

  // Defines a linear transform that maps the range [sourceBottom, sourceTop] in
  // the incoming data to [destBottom, destTop] in the outgoing, filtered data.
  message ScaleTransform {
    optional double sourceBottom = 1 [default = 0];
    optional double sourceTop = 2 [default = 1];
    optional double destBottom = 3 [default = 0];
    optional double destTop = 4 [default = 1];
  }

  // _If_ the sensor is of type SensorTypeProvider.TYPE_CUSTOM, how is it
  // scaled?  A missing value means no scaling.  If customFrequency is true,
  // then this scaling is applied _after_ the frequency filter.
  optional ScaleTransform customScaleTransform = 5;
}
