/*
 *  Copyright 2019 Google Inc. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

syntax = "proto2";

package goosci;

option java_package = "com.google.android.apps.forscience.whistlepunk.data";
option java_outer_classname = "GoosciSensor";
option objc_class_prefix = "GSJ";
option optimize_for = LITE_RUNTIME;

// Common messages which can go Phone -> Device or Device -> Phone.

message Empty {
}  // TODO: replace with an import of empty.proto

message Version {
  // See
  // https://docs.google.com/document/d/10SgMM-_myVyfZQZ_afLipPv_x4aq4gQG2FTrY3oktXM/edit#
  // for version policy and implementation details. Encode new versions using
  // https://goosci.googlesource.com/android/+/master/proto/version_codec.py
  enum VersionEnum {
    option allow_alias = true;
    V_1_0_0 = 0x800;

    LATEST = 0x800;
  }
}

// Analog pin number refers to the numeric value in A0, A1, A2... use
// this to request values from an analog pin on the Device.
message AnalogPin {
  required int32 pin = 1;
};

// Digital pin number refers to the numeric value in D2, D3... use
// this to request values from a digital pin on the Device.
message DigitalPin {
  required int32 pin = 1;
};

// Data type of a scalar
enum DataType {
  ANALOG = 1;
  DIGITAL = 2;
  FLOAT = 3;
  INT = 4;
  STRING = 5;
};

// Virtual pin refers to a non-physical pin capability on the Device,
// such as a Gooball orientation sensor that returns vectors of
// floats.
message VirtualPin {
  required int32 pin = 1;
};

// Pin of a specific type.
message Pin {
  oneof pin {
    AnalogPin analog_pin = 10;
    DigitalPin digital_pin = 11;
    VirtualPin virtual_pin = 12;
  }
};

/// Phone -> Device requests

// How many times, and how frequently the Device should return values for this
// request.  If count is greater than 1, then the Device should return values
// every frequency milliseconds until the count is exceeded.
message Interval {
  required int32 count = 1;
  optional int32 frequency = 2;
};

// Phone to Device request to initiate sensor data collection and
// reporting from multiple pins over an interval.  The timestamp is
// used to synchronize the (inaccurate) clock on the device to the
// (accurate) clock on the phone.
message SensorDataRequest {
  required uint32 timestamp_key = 1;
  required Interval interval = 2;
  repeated Pin pin = 3;
};

/// Device -> Phone reponses

// AnalogValue contains a stream of single-dimensional integer values
// collected from an analog pin on the Device.
message AnalogValue {
  required uint32 value = 1;
};
// DigitalValue contains a stream of single-dimensional boolean values
// collected from an digital pin on the Device.  We use bool to
// represent DigitalValues, although packed bytes would be a more
// efficient encoding.
message DigitalValue {
  required bool value = 1;
};
// FloatValue contains a stream of single-dimensional floating point values
// synthesized by the Firmware from data collected on the Device.
message FloatValue {
  required float value = 1;
};
// IntValue contains a stream of single-dimensional integer values
// synthesized by the Firmware from data collected on the Device.
message IntValue {
  required int32 value = 1;
};
// StringValue contains a stream of single-dimensional string values
// synthesized by the Firmware from data collected on the Device.
message StringValue {
  required string value = 1;
};

message Data {
  required Pin pin = 1;
  oneof value {
    AnalogValue analog_value = 10;
    DigitalValue digital_value = 11;
    FloatValue float_value = 12;    // virtual type
    IntValue int_value = 13;        // virtual type
    StringValue string_value = 14;  // virtual type
  }
};

// SensorData contains collected sensor data that is sent from Device
// to Phone. The timestamp_key should be identical to the
// timestamp_key in the SensorDataRequest.  Relative timings in
// submessages are relative to the timestamp_key base.

message Error {
  required string error = 1;  // Text description of error.
};

message SensorData {
  required uint32 timestamp_key = 1;
  oneof result {
    Error error = 10;
    Data data = 11;
  }
};
