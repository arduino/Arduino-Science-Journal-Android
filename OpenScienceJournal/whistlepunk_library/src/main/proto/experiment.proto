/*
 *  Copyright 2019 Google Inc. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// LINT: LEGACY_NAMES

syntax = "proto2";

package goosci;

import "label.proto";
import "sensor_layout.proto";
import "sensor_spec.proto";
import "sensor_trigger.proto";
import "trial.proto";
import "version.proto";

option java_package = "com.google.android.apps.forscience.whistlepunk.metadata";
option java_outer_classname = "GoosciExperiment";
option objc_class_prefix = "GSJ";
option optimize_for = LITE_RUNTIME;

/*
 * Experiment protobuf definition.
 * Added in V2.
 */
message Experiment {
  // The timestamp that this experiment was created.
  optional int64 creationTimeMs = 1;

  // The user-entered title of this experiment.
  optional string title = 2;

  // The user-entered description of this experiment.
  // This is deprecated in version 1.1, when old descriptions were turned into
  // text notes.
  optional string description = 3 [deprecated = true];

  // SensorLayouts associated with this experiment.  (That is, the sensors that
  // are currently shown in cards)
  repeated SensorLayout sensorLayouts = 4;

  // Trials in this experiment.
  repeated Trial trials = 5;

  // Labels in this experiment.
  repeated Label labels = 6;

  // Sensors included in or excluded from this experiment.
  // (should use availableSensors instead; this field was never populated.)
  repeated ExperimentSensor experimentSensors = 7 [deprecated = true];

  // Sensor triggers associated with sensors in this experiment.
  repeated SensorTrigger sensorTriggers = 8;

  // Deprecated, use fileVersion below
  optional int32 version = 9 [default = 1, deprecated = true];

  // Deprecated, use fileVersion below
  optional int32 minorVersion = 10 [default = 1, deprecated = true];

  // Version 1.1: Added
  message SensorEntry {
    // The sensor ID associated with this within this experiment.
    // This has no global uniqueness or parseable meaning outside this
    // experiment
    optional string sensorId = 1;

    // The spec of the sensor with this id.
    optional SensorSpec spec = 2;
  }

  // Which sensors are currently shown as available in the sensor cards to be
  // observed. If a host device is not able to observe sensors in
  // availableSensors, perhaps because it loaded an experiment created from a
  // different device, those sensors will be disabled in sensor cards.
  repeated SensorEntry availableSensors = 11;

  // Identifies the intended format version of this file, and the app that wrote
  // it. See version.proto for details.
  optional FileVersion fileVersion = 12;

  // The total number of trials ever made in this experiment. This is used to
  // create unique names for untitled trials, i.e. "Recording 1", "Recording 2",
  // etc, so that no two recordings in one experiment ever use the same name.
  // This differs from GoosciUserMetadata.ExperimentOverview.trialCount because
  // it is monotonically increasing, whereas trialCount will decrease when
  // trials are deleted.
  optional int32 totalTrials = 13;

  // The path to an image to be used as the Experiment image in the experiment
  // list. Should be relative to the experiment directory.
  optional string imagePath = 14;

  // The list of changes that have been made to the experiment over time.
  repeated Change changes = 15;
}

/*
 * Sensors included or excluded in an experiment.
 * TODO: Work with saff to figure out if other information needs to be included,
 * such as a name the user gives their device that represents the type of
 * sensors.
 */
message ExperimentSensor {
  // The sensor ID
  optional string sensorId = 1;

  // Whether this sensor is included.
  optional bool included = 2;
}

/*
 * A single change to the experiment. Adding, editing, or deleting labels,
 * titles, or trials will all result in a new change being added here. Used
 * for resoving conflicts between client and server.
 */
message Change {
  enum ChangeType {
    // Default. Do not use.
    UNKNOWN = 0;

    // Used to signify a change that results in a new UUID being generated.
    // Generally adding a trial or label.
    ADD = 1;

    // Used to signify a change that removes an item with a UUID from the
    // Experiment proto.
    DELETE = 2;

    // Used to signify a change that alters the content of an item with an
    // existing UUID.
    MODIFY = 3;

    // Used to signify changes that take place during a mergeFrom, such as
    // Editing the title of an experiment to contain two titles. May be unused.
    MERGE = 4;
  }

  // A UUID to identify the change.
  optional string changeId = 1;

  // A reference to the label or trial that was changed.
  optional ChangedElement changedData = 2;

  // The type of change.
  optional ChangeType type = 3;
}

/*
 * An indication of what element was changed by this change.
 */
message ChangedElement {
  enum ElementType {
    // Default. Do not use.
    UNKNOWN = 0;

    // A note or label.
    NOTE = 1;

    // A trial. Not a note or label within a trial, just the trial itself.
    TRIAL = 2;

    // The whole experiment. Used to indicate the Title.
    EXPERIMENT = 3;

    // A caption. Id should refer to the parent element.
    CAPTION = 4;
  }

  // The type of element changed.
  optional ElementType type = 1;

  // The ExperimentID, LabelID or TrialID UUID of the edited element, or in the
  // case of caption, the ID of the parent.
  optional string id = 2;
}
